"use strict";
var Profile_1 = require('../models/Profile');
var ProfilesController = {
    getAll_abc: function (req, res) {
        Profile_1.Profile
            .find({})
            .setOptions({ sort: 'name' })
            .exec(function (err, profiles) {
            if (err)
                return res.status(500).send({ message: 'an error occurred when looking up all profiles', originalError: err });
            if (!profiles.length)
                return res.status(404).send({ message: 'unable to locate any profiles' });
            return res.send(profiles);
        });
    },
    getAll_abcOpposite: function (req, res) {
        Profile_1.Profile
            .find({})
            .setOptions({ sort: '-name' })
            .exec(function (err, profiles) {
            if (err)
                return res.status(500).send({ message: 'an error occurred when looking up all profiles', originalError: err });
            if (!profiles.length)
                return res.status(404).send({ message: 'unable to locate any profiles' });
            return res.send(profiles);
        });
    },
    getOne: function (req, res) {
        if (req.params.id == 'me') {
            var userId_1 = 1;
            Profile_1.Profile
                .findOne({ userId: userId_1 })
                .exec(function (err, profile) {
                if (err)
                    return res.status(500).send({ message: 'an error occurred when trying to look up profile with id ' + req.params.id, originalError: err });
                if (!profile)
                    return res.status(404).send('Unable to locate profile associated with the indicated userId: ' + userId_1);
                return res.send(profile);
            });
        }
        else {
            Profile_1.Profile
                .findById(req.params.id)
                .exec(function (err, profile) {
                if (err)
                    return res.status(500).send({ message: 'encountered an error when looking up profile with id ' + req.params.id, originalError: err });
                if (!profile)
                    return res.status(404).send({ message: 'unable to find the profile with id ' + req.params.id });
                return res.send(profile);
            });
        }
    },
    create: function (req, res) {
        var _a = req.body, name = _a.name, username = _a.username, email = _a.email;
        var createdOn = new Date();
        var newProfile = new Profile_1.Profile({
            name: name,
            username: username,
            email: email,
            createdOn: createdOn
        });
        newProfile.save(function (err, profile) {
            if (err)
                return res.status(500).send({ message: 'there was an error saving the profile', originalError: err });
            if (!profile)
                return res.status(404).send({ message: 'Unable to locate profile associated with the indicated id: ' + req.params.id });
            return res.send(profile);
        });
    },
    update: function (req, res) {
        var searchId = req.params.id;
        console.log(searchId);
        if (!searchId)
            return res.status(404).send('No profile id specified');
        Profile_1.Profile
            .findOneAndUpdate({ _id: searchId }, req.body)
            .exec(function (err, profile) {
            if (err)
                return res.status(500).send({ message: 'Error when looking for profile with the id of ' + searchId + ' and the update body of ' + req.body, originalError: err });
            if (!profile)
                return res.status(404).send({ message: 'Unable to locate profile associated with the indicated id: ' + req.params.id });
            console.log(profile);
            return res.send(profile);
        });
    }
};
exports.ProfilesController = ProfilesController;

//# sourceMappingURL=data:application/json;base64,
